name: Auto-fill PR Description from Commit Messages

on:
  pull_request:
    types: [opened, synchronize, edited]
    branches:
      - stage
      - master
      - main

permissions:
  pull-requests: write
  contents: read

jobs:
  fill-description:
    runs-on: ubuntu-latest

    steps:
      - name: Install GitHub CLI
        run: |
          echo "üîß Installing GitHub CLI..."
          sudo apt update
          sudo apt install -y gh git

      - name: Authenticate GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîë Authenticating GitHub CLI..."
          gh auth status

      - name: Checkout the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed to access all commits

      - name: Get commit messages from PR and update description
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          BASE_SHA: ${{ github.event.pull_request.base.sha }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          echo "üìã Getting commit messages between $BASE_SHA and $HEAD_SHA"

          COMMITS=$(git log --pretty=format:"%s" "$BASE_SHA..$HEAD_SHA")

          echo "üîç Raw commit messages:"
          echo "$COMMITS"

          MERGED_BRANCHES=$(echo "$COMMITS" | grep -oE "'(feature|bugfix|improvements|chore)/#[0-9]+_[^']+'" | tr -d "'" | sort -u)

          echo "üìÇ Extracted merged branches:"
          echo "$MERGED_BRANCHES"

          declare -A TICKETS_BY_TYPE
          DESCRIPTION=""

          while IFS= read -r BRANCH; do
            echo "üîé Processing branch: $BRANCH"

            if [[ "$BRANCH" =~ ^(feature|bugfix|improvements|chore)/#([0-9]+)_ ]]; then
              TYPE="${BASH_REMATCH[1]}"
              TICKET="${BASH_REMATCH[2]}"
              echo "‚úÖ Type: $TYPE, Ticket: $TICKET"
              TICKETS_BY_TYPE["$TYPE"]+="$TICKET"$'\n'
            else
              echo "‚ö†Ô∏è Skipped non-matching branch: $BRANCH"
            fi
          done <<< "$MERGED_BRANCHES"

          for TYPE in "${!TICKETS_BY_TYPE[@]}"; do
            DESCRIPTION+="### $TYPE"$'\n'
            echo "üì¶ Adding section: $TYPE"
            UNIQUE_TICKETS=$(echo "${TICKETS_BY_TYPE[$TYPE]}" | sort -u)
            while IFS= read -r ID; do
              [[ -n "$ID" ]] && DESCRIPTION+="- Kunnusta/tickets#$ID"$'\n'
            done <<< "$UNIQUE_TICKETS"
            DESCRIPTION+=$'\n'
          done

          if [[ -z "$DESCRIPTION" ]]; then
            echo "‚ö†Ô∏è No valid branch data found. Skipping PR update."
            exit 0
          fi

          echo "üìù Final generated PR description:"
          echo "$DESCRIPTION"

          echo "üì§ Updating PR description..."
          gh pr edit "$PR_NUMBER" --repo "$REPO" --body "$DESCRIPTION"
          echo "‚úÖ PR description updated."
